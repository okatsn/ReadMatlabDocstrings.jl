var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ReadMatlabDocstrings","category":"page"},{"location":"#ReadMatlabDocstrings","page":"Home","title":"ReadMatlabDocstrings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ReadMatlabDocstrings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ReadMatlabDocstrings]","category":"page"},{"location":"#ReadMatlabDocstrings._getrawcomment-Tuple{Any}","page":"Home","title":"ReadMatlabDocstrings._getrawcomment","text":"_getrawcomment(s) get all strings before the line starts with \"function\" or \"classdef\"; the comment symbol such as \"% \" will be kept.\n\n\n\n\n\n","category":"method"},{"location":"#ReadMatlabDocstrings.getdoc-Tuple{String}","page":"Home","title":"ReadMatlabDocstrings.getdoc","text":"getdoc(filepath::String; first_head=0) read the function descriptions and return a single string ready for Markdown.parse. Now it supports matlab's .m function only.\n\nExample (matlab)\n\ny = getdoc(\"..\\..\\src\\statind.m\") get the docstring (the comments (starts with % eachline) before \"function statind(...)\").\ny = getdoc(\"..\\..\\src\\statind.m\", first_head=3) get the docstring and rearrange all the heading levels based on forcing the first heading level to be 3. That is, take the first heading to be # for example, # becomes ### and ## becomes ####\ny = getdoc(\"..\\..\\src\\statind.m\", filename_header=3) get the docstring and insert a level-3 markdown header at the first line: \"### statind\".\n\n\n\n\n\n","category":"method"},{"location":"#ReadMatlabDocstrings.lang_matlab-Tuple{Any}","page":"Home","title":"ReadMatlabDocstrings.lang_matlab","text":"Given a vector of rawcomments, lang_matlab strips all comment symbols (i.e., %).\n\n\n\n\n\n","category":"method"}]
}
